!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t){e.exports=class{constructor(e,t){this.x=e,this.y=t}print(){console.log(JSON.stringify(this))}}},function(e,t){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(i=window)}e.exports=i},function(e,t,i){const n=i(0);function r(e){return Math.pow(e,2)}function s(e){return Math.PI*(e/180)}function o(e){return Math.sin(s(e))}function a(e){return Math.cos(s(e))}function l(e){return 0===e.x?0:h(180*Math.atan2(e.y,e.x)/Math.PI)}function h(e){return(e+360)%360}e.exports={rotate:function(e,t){const i=h(l(e)+t),s=function(e){return Math.sqrt(r(e.x)+r(e.y))}(e),u=a(i)*s,g=o(i)*s;return new n(u,g)},translate:function(e,t){return new n(e.x+t.x,e.y+t.y)},sin:o,cos:a}},function(e,t,i){(function(t){const n=i(0),r=i(4),s=i(6),o=i(7);function a(e){var t=0;if(0===e.length)return t;for(var i=0;i<e.length;i++){t=(t<<5)-t+e.charCodeAt(i),t&=t}return t}class l{constructor({rings:e,aliveStates:t,colors:i,startCells:s,startT:o=0,canvasId:a}){this.rings=e,this.aliveStates=t,this.colors=i,this.startCells=s,this.pentaflower=new r({rings:e,aliveStates:t}),s.forEach(e=>{this.pentaflower.setState(e)}),this.prevFills=null,this.fills=this.pentaflower.pentagons.map(e=>e.getState()?this.colors[0]:this.colors[1]),this.t=0,this.canvasId=a,this.hasRenderedCanvas=!1;const l=this.pentaflower.getDimensions();this.fifthX=l.rangeX/5,this.fifthY=l.rangeY/5;const h=new n(l.offset.x,l.offset.y);this.viewXEnd=l.rangeX-2*this.fifthX,this.viewYEnd=l.rangeY-2*this.fifthY,this.points=this.pentaflower.pentagons.map(e=>e.points.reduce((e,t)=>`${e} ${t.x+h.x},${t.y+h.y}`,"")),this.prevFills=this.pentaflower.pentagons.map(e=>e.getState()?i[0]:i[1]);for(let e=0;e<o;e++)this.pentaflower.progress(),this.t++}nextT(){this.pentaflower.progress(),this.t++,this.renderCanvas()}renderInitialCanvas(){document.getElementById(this.canvasId).innerHTML=`      <svg xmlns="http://www.w3.org/2000/svg" width="700px" height="700px" viewBox="${this.fifthX} ${this.fifthY} ${this.viewXEnd} ${this.viewYEnd}" preserveAspectRatio="xMidYMid slice" style="background: ${this.colors[2]};">\n        ${this.fills.map((e,t)=>`<polygon points="${this.points[t]}" fill="${e}" id="${this.canvasId}-poly-${t}" />`)}\n      </svg>\n    `}renderCanvas(){this.hasRenderedCanvas||(this.renderInitialCanvas(),this.hasRenderedCanvas=!0),this.fills=this.pentaflower.pentagons.map(e=>e.getState()?this.colors[0]:this.colors[1]),this.fills.map((e,t)=>{if(e!==this.prevFills[t])return{index:t,fill:e}}).filter(e=>!!e).forEach(({index:e,fill:t})=>{document.getElementById(`${this.canvasId}-poly-${e}`).setAttribute("fill",t)}),this.prevFills=this.fills}export(e="pentaflower"){const t=document.createElement("a"),i=new window.Blob([document.getElementById(this.canvasId).innerHTML],{type:"text/plain"});t.href=URL.createObjectURL(i),t.download=`${e}.svg`,t.click()}getName(){const e=this.colors,t={rings:this.rings,aliveStates:this.aliveStates,startCells:this.startCells,t:this.t},i=JSON.stringify(e),n=JSON.stringify(t),r=a(i),l=a(n),h=Math.abs(r)%s.length,u=Math.abs(l)%o.length;return`${s[h]} ${o[u]}`}}e.exports=l,t.PentaflowerCanvas=l}).call(this,i(1))},function(e,t,i){(function(t){const{generateRegularPolygon:n}=i(5),r=i(0),{rotate:s}=i(2);function o(e,t){return e.map(e=>new r(e.x+t.x,e.y+t.y))}function a(e,t,i){let r=n(e);return t&&(r=function(e,t){return e.map(e=>s(e,t))}(r,t)),i&&(r=o(r,i)),r}function l(e,t){return new r(e.x-t.x,e.y-t.y)}const h={a:[1,3],b:[0,2],c:[4,1],d:[2,1],e:[1,0],f:[2,3],g:[1,2],h:[0,1],i:[3,1],j:[2,0]},u=[{1:{firstNeighbor:"b",neighbor:"a"},2:{firstNeighbor:"f",neighbor:"g"}},{1:{firstNeighbor:"c",neighbor:"b"},2:{firstNeighbor:"g",neighbor:"h"}},{1:{firstNeighbor:"d",neighbor:"c"},2:{firstNeighbor:"h",neighbor:"i"}},{1:{firstNeighbor:"e",neighbor:"d"},2:{firstNeighbor:"i",neighbor:"j"}},{1:{firstNeighbor:"a",neighbor:"e"},2:{firstNeighbor:"j",neighbor:"f"}}],g=a(5,null,new r(-.5,-.5)),c=a(5,36,new r(-.5,-.5));class f{constructor(e,t,i,n){this.points=e,this.type=t,this.level=i,this.index=n,this.quadrant=Math.ceil(n/i),this.subQuad=Math.ceil(2*n/i)%10,this.isFirst=n%i==0,this.isLast=n%i==i-1;const r=this.subQuad%2==0;this.altType="2"===t&&r||"1"===t&&!r?"a":"b",this.isLastInSub=n%(i/2)==0,this.hasTwoNeighbors="b"===this.altType||"a"===this.altType&&this.isLastInSub,this.neighbors=[],this.nextState=!1,this.state=!1}getState(){return this.state}addNeighbor(e){const t=h[e],i="1"===this.type?c:g;return o(i,l(this.points[t[0]],i[t[1]]))}toSVG(e){return pointsToSVG(this.points,this.getColor(),new r(e.x,e.y))}}class p{constructor({rings:e=50,aliveStates:t=[1]}){this.aliveStates=t;const i=g,n=o(c,l(i[1],c[0])),r=o(c,l(i[1],c[3])),s=o(c,l(i[0],c[2])),a=o(c,l(i[4],c[1])),h=o(c,l(i[2],c[1])),p=[new f(i,"1",0,0),new f(r,"2",1,0),new f(s,"2",1,1),new f(a,"2",1,2),new f(h,"2",1,3),new f(n,"2",1,4)],d=p[0];for(var y=1;y<=5;y++)p[y].neighbors.push(d),d.neighbors.push(p[y]);function m(e){return 0===e?1:5*e+m(e-1)}!function e(t,i,n){if(n<i){const s=m(n-1),o=m(n),a=n%2==0?"1":"2",l="1"===a?"2":"1",h=[];for(var r=s;r<o;r++)h.push(r);let g=0;h.forEach((e,i)=>{const r=Math.floor(i/n),o=i%n==n-1;if("2"===a&&i%n==0){const i=u[r][a].firstNeighbor,s=t[e].addNeighbor(i),o=new f(s,l,n+1,g);o.neighbors.push(t[e]),t[e].neighbors.push(o),t.push(o),g++}const h=u[r][a].neighbor,c=t[e].addNeighbor(h),p=new f(c,l,n+1,g);p.neighbors.push(t[e]),t.push(p),t[e].neighbors.push(p);const d=t[e-1],y=t[e+1];if(!d.hasTwoNeighbors||d.isLast||d.isFirst||"1"!==d.type?!y.hasTwoNeighbors||y.isLast||y.isFirst||"2"!==y.type||(p.neighbors.push(y),y.neighbors.push(p)):(p.neighbors.push(d),d.neighbors.push(p)),g++,"1"===a&&o){const i=u[r][a].firstNeighbor,o=t[e].addNeighbor(i),h=new f(o,l,n+1,g);h.neighbors.push(t[e]),t[e].neighbors.push(h),t.push(h);let c=t[e+1];c.hasTwoNeighbors&&(c.level===n?(h.neighbors.push(c),c.neighbors.push(h)):(c=t[s],h.neighbors.push(c),c.neighbors.push(h))),g++}}),e(t,i,n+1)}}(p,e,1),this.pentagons=p}setState(e){this.pentagons[e].state=!0}progress(){this.pentagons;this.pentagons.forEach((e,t)=>{const i=e.neighbors.filter(e=>e.state).length;6===t&&3!==e.neighbors.length&&console.log(e.neighbors),e.nextState=this.aliveStates.includes(i)}),this.pentagons.forEach(e=>{e.state=e.nextState})}getDimensions(){const e=this.pentagons.map(e=>e.points),t=e.map(e=>Math.min(...e.map(e=>e.x))),i=e.map(e=>Math.min(...e.map(e=>e.y))),n=e.map(e=>Math.max(...e.map(e=>e.x))),s=e.map(e=>Math.max(...e.map(e=>e.y))),o=Math.min(...t),a=Math.min(...i),l=Math.max(...n)-o,h=Math.max(...s)-a;return{offset:new r(-o,-a),rangeX:l,rangeY:h}}}e.exports=p,t.Pentaflower=p}).call(this,i(1))},function(e,t,i){const n=i(0),{rotate:r,translate:s,sin:o,cos:a}=i(2);e.exports={generateRegularPolygon:function(e){if(e<3)throw new Error("Polygon must have 3 or more sides.");let t=[];t.push(new n(1,0)),t.push(new n(0,0));const i=function(e){return 180*(e-2)/e}(e),l=i+180;t.push(new n(a(i),o(i)));const h=function(e,t){return i=>{const n=r(i,e);return s(n,t)}}(l,new n(t[2].x,t[2].y)),u=e-3;for(let e=0;e<u;e++)t.push(h(t[t.length-1]));return t}}},function(e){e.exports=["Afraid","Agreeable","Amused","Ancient","Angry","Annoyed","Anxious","Arrogant","Ashamed","Average","Awful","Bad","Beautiful","Better","Big","Bitter","Black","Blue","Boiling","Brave","Breezy","Brief","Bright","Broad","Broken","Bumpy","Calm","Careful","Charming","Cheerful","Chilly","Clumsy","Cold","Colossal","Combative","Comfortable","Confused","Cooing","Cool","Cooperative","Courageous","Crazy","Creepy","Cruel","Cuddly","Curly","Curved","Damp","Dangerous","Deafening","Deep","Defiant","Delicious","Delightful","Depressed","Determined","Dirty","Disgusted","Disturbed","Dizzy","Dry","Dull","Dusty","Eager","Early","Elated","Embarrassed","Empty","Encouraging","Energetic","Enthusiastic","Envious","Evil","Excited","Exuberant","Faint","Fair","Faithful","Fantastic","Fast","Fat","Few","Fierce","Filthy","Fine","Flaky","Flat","Fluffy","Foolish","Forlorn","Frail","Frantic","Fresh","Friendly","Frightened","Funny","Fuzzy","Gentle","Giant","Gigantic","Good","Greasy","Great","Green","Grieving","Grubby","Grumpy","Handsome","Happy","Hard","Harsh","Healthy","Heavy","Helpful","Helpless","High","Hilarious","Hissing","Hollow","Homeless","Horrible","Hot","Huge","Hungry","Hurt","Hushed","Husky","Icy","Ill","Immense","Itchy","Jealous","Jittery","Jolly","Juicy","Kind","Large","Late","Lazy","Light","Little","Lively","Lonely","Long","Loose","Loud","Lovely","Low","Lucky","Magnificent","Many","Massive","Melodic","Melted","Mighty","Miniature","Moaning","Modern","Mute","Mysterious","Narrow","Nasty","Naughty","Nervous","New","Nice","Nosy","Numerous","Nutty","Obedient","Obnoxious","Odd","Old","Orange","Ordinary","Outrageous","Panicky","Perfect","Petite","Plastic","Pleasant","Precious","Pretty","Prickly","Proud","Puny","Purple","Purring","Quaint","Quick","Quickest","Quiet","Rainy","Rapid","Rare","Raspy","Ratty","Red","Relieved","Resonant","Ripe","Roasted","Robust","Rotten","Rough","Round","Sad","Salty","Scary","Scattered","Scrawny","Screeching","Selfish","Shaggy","Shaky","Shallow","Sharp","Shivering","Short","Shrill","Silent","Silky","Silly","Skinny","Slimy","Slippery","Slow","Small","Smart","Smiling","Smooth","Soft","Solid","Sore","Sour","Spicy","Splendid","Spotty","Square","Squealing","Stale","Steady","Steep","Sticky","Stingy","Straight","Strange","Striped","Strong","Stupendous","Sweet","Swift","Tall","Tame","Tan","Tart","Tasteless","Tasty","Tender","Tender","Tense","Terrible","Testy","Thirsty","Thoughtful","Thoughtless","Thundering","Tight","Tiny","Tired","Tough","Tricky","Troubled","Ugliest","Ugly","Uneven","Upset","Uptight","Vast","Victorious","Vivacious","Voiceless","Wasteful","Watery","Weak","Weary","Wet","Whispering","Wicked","Wide","Witty","Wonderful","Wooden","Worried","Yellow","Young","Yummy","Zany"]},function(e){e.exports=["Aconite","Ageratum","Allium","Alstromeria","Amaryllis","Anemone","Angelica","Angelonia","Artemisia","Aster","Astilbe","Aubrieta","Alyssum","Balloon Flower","Balsam","Baneberry","Basket of Gold","Bee Balm","Begonia","Bellflower","Bergenia","Blackeyed Susan","Bleeding Heart","Bloodroot","Boneset","Browalia","Bugleweed","Bugloss","Buttercup","Butterfly Weed","Caladium","Calendula","California Poppy","Canna","Canterbury Bells","Cardinal Flower","Carnation","Castor Bean","Catmint","Celosia","Chives","Chrysanthemum","Clary Sage","Cleome","Cockscomb","Coleus","Columbine","Comfrey","Coneflower","Coreopsis","Corydalis","Cosmos","Crocus","Crown Imperial","Cushion Spurge","Cyclamen","Daffodil","Dahlia","Daisy","Dame’s Rocket","Delphinium","Dianthus","Diascia","Dusty Miller","Dutchman’s Breeches","Epimedium","Evergreen Candytuft","Fennel","Fountain Grass","Foxglove","Gaillardia","Gardenias","Gas Plant","Gaura","Gazania","Geranium","Geum","Globe Thistle","Glory of the Snow","Goatsbeard","Golden Marguerite","Gomphrena","Helconia","Heliotrope","Hepatica","Hibiscus","Hollyhock","Hosta","Hyacinth","Hydrangea","Hyssop","Impatiens","Iris","Jack-in-the-Pulpit","Jacob’s Ladder","Lady’s Mantle","Lantana","Lavender","Lavender Cotton","Leadwort","Lemon Balm","Lily","Lily of the Valley","Lisianthus","Lobelia","Lupine","Maiden Pink","Malva","Marigold","Mazus","Mirabilis","Moonflower","Morning Glory","Nasturtium","Nierembergia","Orchid","Osteospermum","Pansy","Pasque","Pearly Everlasting","Pentas","Peony","Perennial Flax","Periwinkle","Petunia","Pincushion Flower","Polka Dot Plant","Primrose","Ranunculus","Red Valerian","Rhododendron","Rock Soapwort","Rose","Rue","Sanvitalia","Scabiosa","Scarlet Sage","Sea Holly","Sea Lavender","Sea Thrift","Shirley Poppy","Shooting Star","Silvermound","Skunk Cabbage","Snapdragon","Snow in Summer","Snowdrop","Solomon’s Seal","Spring Snowflake","Streptocarpus","Summer Savory","Sunflower","Sweet Woodruff","Tansy","Thunbergia","Tithonia","Torenia","Trillium","Tulip","Verbena","Violet","Virginia Bluebell","Wild Senna","Windflower","Wisteria","Yarrow","Yellow Archangel","Yellow Loosestrife","Zinnia"]}]);