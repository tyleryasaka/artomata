!function(e){var t={};function l(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=e,l.c=t,l.d=function(e,t,i){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(l.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)l.d(i,n,function(t){return e[t]}.bind(null,n));return i},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="",l(l.s=3)}([function(e,t){e.exports=class{constructor(e,t){this.x=e,this.y=t}print(){console.log(JSON.stringify(this))}}},function(e,t){var l;l=function(){return this}();try{l=l||new Function("return this")()}catch(e){"object"==typeof window&&(l=window)}e.exports=l},function(e,t,l){const i=l(0);function n(e){return Math.pow(e,2)}function r(e){return Math.PI*(e/180)}function a(e){return Math.sin(r(e))}function o(e){return Math.cos(r(e))}function s(e){return 0===e.x?0:y(180*Math.atan2(e.y,e.x)/Math.PI)}function y(e){return(e+360)%360}e.exports={rotate:function(e,t){const l=y(s(e)+t),r=function(e){return Math.sqrt(n(e.x)+n(e.y))}(e),u=o(l)*r,h=a(l)*r;return new i(u,h)},translate:function(e,t){return new i(e.x+t.x,e.y+t.y)},sin:a,cos:o}},function(e,t,l){(function(t){const i=l(0),n=l(4),r=l(6),a=l(7),o=l(8);function s(e){var t=0;if(0===e.length)return t;for(var l=0;l<e.length;l++){t=(t<<5)-t+e.charCodeAt(l),t&=t}return t}class y{constructor({rings:e,aliveStates:t=[1],colors:l,startCells:r=[0],startT:a=0,containerId:o}){this.rings=e,this.aliveStates=t,this.colors=l.map(e=>e.toUpperCase()),this.startCells=r,this.pentaflower=new n({rings:e,aliveStates:t}),r.forEach(e=>{this.pentaflower.setState(e)}),this.prevFills=null,this.fills=this.pentaflower.pentagons.map(e=>e.getState()?this.colors[0]:this.colors[1]),this.t=0,this.containerId=o,this.hasRenderedCanvas=!1;const s=this.pentaflower.getDimensions();this.fifthX=s.rangeX/5,this.fifthY=s.rangeY/5;const y=new i(s.offset.x,s.offset.y);this.viewXEnd=s.rangeX-2*this.fifthX,this.viewYEnd=s.rangeY-2*this.fifthY,this.points=this.pentaflower.pentagons.map(e=>e.points.reduce((e,t)=>`${e} ${t.x+y.x},${t.y+y.y}`,"")),this.prevFills=this.pentaflower.pentagons.map(e=>e.getState()?l[0]:l[1]);for(let e=0;e<a;e++)this.pentaflower.progress(),this.t++;this.render()}nextT(){this.pentaflower.progress(),this.t++,this.render()}renderInitial(){document.getElementById(this.containerId).innerHTML=`      <svg xmlns="http://www.w3.org/2000/svg" width="5000px" height="5000px" viewBox="${this.fifthX} ${this.fifthY} ${this.viewXEnd} ${this.viewYEnd}" preserveAspectRatio="xMidYMid slice">\n        <rect width="100%" height="100%" x="${this.fifthX}" y="${this.fifthY}" fill="${this.colors[2]}"/>\n        ${this.fills.map((e,t)=>`<polygon points="${this.points[t]}" fill="${e}" id="${this.containerId}-poly-${t}" />`)}\n      </svg>\n    `}render(){this.hasRenderedCanvas||(this.renderInitial(),this.hasRenderedCanvas=!0),this.fills=this.pentaflower.pentagons.map(e=>e.getState()?this.colors[0]:this.colors[1]),this.fills.map((e,t)=>{if(e!==this.prevFills[t])return{index:t,fill:e}}).filter(e=>!!e).forEach(({index:e,fill:t})=>{document.getElementById(`${this.containerId}-poly-${e}`).setAttribute("fill",t)}),this.prevFills=this.fills}export(e,t=5e3){e=e||this.getName().replace(/\s/g,"_");const l=document.getElementById(this.containerId).getElementsByTagName("svg")[0],i=document.createElement("canvas"),n=i.getContext("2d"),r=new window.Image;r.width=i.width=t,r.height=i.height=t,r.onload=function(){n.drawImage(r,0,0,t,t);const l=document.createElement("a"),a=function(e){const t=window.atob(e.split(",")[1]),l=e.split(",")[0].split(":")[1].split(";")[0];var i=new ArrayBuffer(t.length),n=new Uint8Array(i);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return new window.Blob([i],{type:l})}(i.toDataURL());l.href=URL.createObjectURL(a),l.download=`${e}.png`,l.click()};const a=(new window.XMLSerializer).serializeToString(l);r.src="data:image/svg+xml,"+encodeURIComponent(a)}getName(){const e={colors:this.colors,rings:this.rings,aliveStates:this.aliveStates,startCells:this.startCells,t:this.t},t=this.colors,l={rings:this.rings,aliveStates:this.aliveStates,startCells:this.startCells,t:this.t},i=JSON.stringify(e),n=JSON.stringify(t),y=JSON.stringify(l),u=s(i),h=s(n),g=s(y),c=Math.abs(u)%r.length,d=Math.abs(h)%a.length,f=Math.abs(g)%o.length;return`${r[c]} ${a[d]} ${o[f]}`}}e.exports=y,t.PentaflowerSVG=y}).call(this,l(1))},function(e,t,l){(function(t){const{generateRegularPolygon:i}=l(5),n=l(0),{rotate:r}=l(2);function a(e,t){return e.map(e=>new n(e.x+t.x,e.y+t.y))}function o(e,t,l){let n=i(e);return t&&(n=function(e,t){return e.map(e=>r(e,t))}(n,t)),l&&(n=a(n,l)),n}function s(e,t){return new n(e.x-t.x,e.y-t.y)}const y={a:[1,3],b:[0,2],c:[4,1],d:[2,1],e:[1,0],f:[2,3],g:[1,2],h:[0,1],i:[3,1],j:[2,0]},u=[{1:{firstNeighbor:"b",neighbor:"a"},2:{firstNeighbor:"f",neighbor:"g"}},{1:{firstNeighbor:"c",neighbor:"b"},2:{firstNeighbor:"g",neighbor:"h"}},{1:{firstNeighbor:"d",neighbor:"c"},2:{firstNeighbor:"h",neighbor:"i"}},{1:{firstNeighbor:"e",neighbor:"d"},2:{firstNeighbor:"i",neighbor:"j"}},{1:{firstNeighbor:"a",neighbor:"e"},2:{firstNeighbor:"j",neighbor:"f"}}],h=o(5,null,new n(-.5,-.5)),g=o(5,36,new n(-.5,-.5));class c{constructor(e,t,l,i){this.points=e,this.type=t,this.level=l,this.index=i,this.quadrant=Math.ceil(i/l),this.subQuad=Math.ceil(2*i/l)%10,this.isFirst=i%l==0,this.isLast=i%l==l-1;const n=this.subQuad%2==0;this.altType="2"===t&&n||"1"===t&&!n?"a":"b",this.isLastInSub=i%(l/2)==0,this.hasTwoNeighbors="b"===this.altType||"a"===this.altType&&this.isLastInSub,this.neighbors=[],this.nextState=!1,this.state=!1}getState(){return this.state}addNeighbor(e){const t=y[e],l="1"===this.type?g:h;return a(l,s(this.points[t[0]],l[t[1]]))}}class d{constructor({rings:e=50,aliveStates:t=[1]}={}){this.aliveStates=t;const l=h,i=a(g,s(l[1],g[0])),n=a(g,s(l[1],g[3])),r=a(g,s(l[0],g[2])),o=a(g,s(l[4],g[1])),y=a(g,s(l[2],g[1])),d=[new c(l,"1",0,0),new c(n,"2",1,0),new c(r,"2",1,1),new c(o,"2",1,2),new c(y,"2",1,3),new c(i,"2",1,4)],f=d[0];for(var p=1;p<=5;p++)d[p].neighbors.push(f),f.neighbors.push(d[p]);function m(e){return 0===e?1:5*e+m(e-1)}!function e(t,l,i){if(i<l){const r=m(i-1),a=m(i),o=i%2==0?"1":"2",s="1"===o?"2":"1",y=[];for(var n=r;n<a;n++)y.push(n);let h=0;y.forEach((e,l)=>{const n=Math.floor(l/i),a=l%i==i-1;if("2"===o&&l%i==0){const l=u[n][o].firstNeighbor,r=t[e].addNeighbor(l),a=new c(r,s,i+1,h);a.neighbors.push(t[e]),t[e].neighbors.push(a),t.push(a),h++}const y=u[n][o].neighbor,g=t[e].addNeighbor(y),d=new c(g,s,i+1,h);d.neighbors.push(t[e]),t.push(d),t[e].neighbors.push(d);const f=t[e-1],p=t[e+1];if(!f.hasTwoNeighbors||f.isLast||f.isFirst||"1"!==f.type?!p.hasTwoNeighbors||p.isLast||p.isFirst||"2"!==p.type||(d.neighbors.push(p),p.neighbors.push(d)):(d.neighbors.push(f),f.neighbors.push(d)),h++,"1"===o&&a){const l=u[n][o].firstNeighbor,a=t[e].addNeighbor(l),y=new c(a,s,i+1,h);y.neighbors.push(t[e]),t[e].neighbors.push(y),t.push(y);let g=t[e+1];g.hasTwoNeighbors&&(g.level===i?(y.neighbors.push(g),g.neighbors.push(y)):(g=t[r],y.neighbors.push(g),g.neighbors.push(y))),h++}}),e(t,l,i+1)}}(d,e,1),this.pentagons=d}setState(e){this.pentagons[e].state=!0}progress(){this.pentagons.forEach((e,t)=>{const l=e.neighbors.filter(e=>e.state).length;e.nextState=this.aliveStates.includes(l)}),this.pentagons.forEach(e=>{e.state=e.nextState})}getDimensions(){const e=this.pentagons.map(e=>e.points),t=e.map(e=>Math.min(...e.map(e=>e.x))),l=e.map(e=>Math.min(...e.map(e=>e.y))),i=e.map(e=>Math.max(...e.map(e=>e.x))),r=e.map(e=>Math.max(...e.map(e=>e.y))),a=Math.min(...t),o=Math.min(...l),s=Math.max(...i)-a,y=Math.max(...r)-o;return{offset:new n(-a,-o),rangeX:s,rangeY:y}}}e.exports=d,t.Pentaflower=d}).call(this,l(1))},function(e,t,l){const i=l(0),{rotate:n,translate:r,sin:a,cos:o}=l(2);e.exports={generateRegularPolygon:function(e){if(e<3)throw new Error("Polygon must have 3 or more sides.");let t=[];t.push(new i(1,0)),t.push(new i(0,0));const l=function(e){return 180*(e-2)/e}(e),s=l+180;t.push(new i(o(l),a(l)));const y=function(e,t){return l=>{const i=n(l,e);return r(i,t)}}(s,new i(t[2].x,t[2].y)),u=e-3;for(let e=0;e<u;e++)t.push(y(t[t.length-1]));return t}}},function(e){e.exports=["Abnormally","Absentmindedly","Accidentally","Actually","Adventurously","Afterwards","Almost","Always","Annually","Anxiously","Arrogantly","Awkwardly","Bashfully","Beautifully","Bitterly","Bleakly","Blindly","Blissfully","Boastfully","Boldly","Bravely","Briefly","Brightly","Briskly","Broadly","Busily","Calmly","Carefully","Carelessly","Cautiously","Certainly","Cheerfully","Clearly","Cleverly","Closely","Coaxingly","Colorfully","Commonly","Continually","Coolly","Correctly","Courageously","Crossly","Cruelly","Curiously","Daily","Daintily","Dearly","Deceivingly","Deeply","Defiantly","Deliberately","Delightfully","Diligently","Dimly","Doubtfully","Dreamily","Easily","Elegantly","Energetically","Enormously","Enthusiastically","Equally","Especially","Even","Evenly","Eventually","Exactly","Excitedly","Extremely","Fairly","Faithfully","Famously","Far","Fast","Fatally","Ferociously","Fervently","Fiercely","Fondly","Foolishly","Fortunately","Frankly","Frantically","Freely","Frenetically","Frightfully","Fully","Furiously","Generally","Generously","Gently","Gladly","Gleefully","Gracefully","Gratefully","Greatly","Greedily","Happily","Hastily","Healthily","Heavily","Helpfully","Helplessly","Highly","Honestly","Hopelessly","Hourly","Hungrily","Immediately","Innocently","Inquisitively","Instantly","Intensely","Intently","Interestingly","Inwardly","Irritably","Jaggedly","Jealously","Jovially","Joyfully","Joyously","Jubilantly","Judgmentally","Justly","Keenly","Kiddingly","Kindheartedly","Kindly","Knavishly","Knowingly","Knowledgeably","Kookily","Lazily","Lightly","Likely","Limply","Lively","Loftily","Longingly","Loosely","Loudly","Lovingly","Loyally","Madly","Majestically","Meaningfully","Mechanically","Merrily","Miserably","Mockingly","Monthly","More","Mortally","Mostly","Mysteriously","Naturally","Hopelessly","Hourly","Hungrily","Immediately","Innocently","Inquisitively","Instantly","Intensely","Intently","Interestingly","Inwardly","Irritably","Jaggedly","Jealously","Jovially","Joyfully","Joyously","Jubilantly","Judgmentally","Justly","Keenly","Kiddingly","Kindheartedly","Kindly","Knavishly","Knowingly","Knowledgeably","Kookily","Lazily","Less","Lightly","Likely","Limply","Lively","Loftily","Longingly","Loosely","Loudly","Lovingly","Loyally","Madly","Majestically","Meaningfully","Mechanically","Merrily","Miserably","Mockingly","Monthly","More","Mortally","Mostly","Mysteriously","Naturally","Nearly","Neatly","Nervously","Never","Nicely","Noisily","Not","Obediently","Obnoxiously","Oddly","Offensively","Officially","Often","Only","Openly","Optimistically","Overconfidently","Painfully","Partially","Patiently","Perfectly","Physically","Playfully","Politely","Poorly","Positively","Potentially","Powerfully","Promptly","Properly","Punctually","Quaintly","Queasily","Queerly","Questionably","Quicker","Quickly","Quietly","Quirkily","Quizzically","Randomly","Rapidly","Rarely","Readily","Really","Reassuringly","Recklessly","Regularly","Reluctantly","Repeatedly","Reproachfully","Restfully","Righteously","Rightfully","Rigidly","Roughly","Rudely","Safely","Scarcely","Scarily","Searchingly","Sedately","Seemingly","Seldom","Selfishly","Separately","Seriously","Shakily","Sharply","Sheepishly","Shrilly","Shyly","Silently","Sleepily","Slowly","Smoothly","Softly","Solemnly","Solidly","Sometimes","Soon","Speedily","Stealthily","Sternly","Strictly","Successfully","Suddenly","Supposedly","Surprisingly","Suspiciously","Sweetly","Swiftly","Sympathetically","Tenderly","Tensely","Terribly","Thankfully","Thoroughly","Thoughtfully","Tightly","Tomorrow","Too","Tremendously","Triumphantly","Truly","Truthfully","Rightfully","Scarcely","Searchingly","Sedately","Seemingly","Selfishly","Separately","Seriously","Sheepishly","Smoothly","Solemnly","Sometimes","Speedily","Stealthily","Successfully","Suddenly","Supposedly","Surprisingly","Suspiciously","Sympathetically","Tenderly","Thankfully","Thoroughly","Thoughtfully","Tomorrow","Tremendously","Triumphantly","Truthfully","Ultimately","Unabashedly","Unaccountably","Unbearably","Unethically","Unexpectedly","Unfortunately","Unimpressively","Unnaturally","Unnecessarily","Upbeat","Upright","Upward","Urgently","Usefully","Uselessly","Usually","Utterly","Vacantly","Vaguely","Vainly","Valiantly","Vastly","Verbally","Very","Viciously","Victoriously","Violently","Vivaciously","Voluntarily","Warmly","Weakly","Wearily","Well","Wetly","Wholly","Wildly","Willfully","Wisely","Woefully","Wonderfully","Worriedly","Wrongly","Yawningly","Yearly","Yearningly","Yesterday","Yieldingly","Youthfully","Zealously","Zestfully","Zestily"]},function(e){e.exports=["Afraid","Agreeable","Amused","Ancient","Angry","Annoyed","Anxious","Arrogant","Ashamed","Average","Awful","Bad","Beautiful","Better","Big","Bitter","Black","Blue","Boiling","Brave","Breezy","Brief","Bright","Broad","Broken","Bumpy","Calm","Careful","Charming","Cheerful","Chilly","Clumsy","Cold","Colossal","Combative","Comfortable","Confused","Cooing","Cool","Cooperative","Courageous","Crazy","Creepy","Cruel","Cuddly","Curly","Curved","Damp","Dangerous","Deafening","Deep","Defiant","Delicious","Delightful","Depressed","Determined","Dirty","Disgusted","Disturbed","Dizzy","Dry","Dull","Dusty","Eager","Early","Elated","Embarrassed","Empty","Encouraging","Energetic","Enthusiastic","Envious","Evil","Excited","Exuberant","Faint","Fair","Faithful","Fantastic","Fast","Fat","Few","Fierce","Filthy","Fine","Flaky","Flat","Fluffy","Foolish","Forlorn","Frail","Frantic","Fresh","Friendly","Frightened","Funny","Fuzzy","Gentle","Giant","Gigantic","Good","Greasy","Great","Green","Grieving","Grubby","Grumpy","Handsome","Happy","Hard","Harsh","Healthy","Heavy","Helpful","Helpless","High","Hilarious","Hissing","Hollow","Homeless","Horrible","Hot","Huge","Hungry","Hurt","Hushed","Husky","Icy","Ill","Immense","Itchy","Jealous","Jittery","Jolly","Juicy","Kind","Large","Late","Lazy","Light","Little","Lively","Lonely","Long","Loose","Loud","Lovely","Low","Lucky","Magnificent","Many","Massive","Melodic","Melted","Mighty","Miniature","Moaning","Modern","Mute","Mysterious","Narrow","Nasty","Naughty","Nervous","New","Nice","Nosy","Numerous","Nutty","Obedient","Obnoxious","Odd","Old","Orange","Ordinary","Outrageous","Panicky","Perfect","Petite","Plastic","Pleasant","Precious","Pretty","Prickly","Proud","Puny","Purple","Purring","Quaint","Quick","Quickest","Quiet","Rainy","Rapid","Rare","Raspy","Ratty","Red","Relieved","Resonant","Ripe","Roasted","Robust","Rotten","Rough","Round","Sad","Salty","Scary","Scattered","Scrawny","Screeching","Selfish","Shaggy","Shaky","Shallow","Sharp","Shivering","Short","Shrill","Silent","Silky","Silly","Skinny","Slimy","Slippery","Slow","Small","Smart","Smiling","Smooth","Soft","Solid","Sore","Sour","Spicy","Splendid","Spotty","Square","Squealing","Stale","Steady","Steep","Sticky","Stingy","Straight","Strange","Striped","Strong","Stupendous","Sweet","Swift","Tall","Tame","Tan","Tart","Tasteless","Tasty","Tender","Tender","Tense","Terrible","Testy","Thirsty","Thoughtful","Thoughtless","Thundering","Tight","Tiny","Tired","Tough","Tricky","Troubled","Ugliest","Ugly","Uneven","Upset","Uptight","Vast","Victorious","Vivacious","Voiceless","Wasteful","Watery","Weak","Weary","Wet","Whispering","Wicked","Wide","Witty","Wonderful","Wooden","Worried","Yellow","Young","Yummy","Zany"]},function(e){e.exports=["Aconite","Ageratum","Allium","Alstromeria","Amaryllis","Anemone","Angelica","Angelonia","Artemisia","Aster","Astilbe","Aubrieta","Alyssum","Balloon Flower","Balsam","Baneberry","Basket of Gold","Bee Balm","Begonia","Bellflower","Bergenia","Blackeyed Susan","Bleeding Heart","Bloodroot","Boneset","Browalia","Bugleweed","Bugloss","Buttercup","Butterfly Weed","Caladium","Calendula","California Poppy","Canna","Canterbury Bells","Cardinal Flower","Carnation","Castor Bean","Catmint","Celosia","Chives","Chrysanthemum","Clary Sage","Cleome","Cockscomb","Coleus","Columbine","Comfrey","Coneflower","Coreopsis","Corydalis","Cosmos","Crocus","Crown Imperial","Cushion Spurge","Cyclamen","Daffodil","Dahlia","Daisy","Dame’s Rocket","Delphinium","Dianthus","Diascia","Dusty Miller","Dutchman’s Breeches","Epimedium","Evergreen Candytuft","Fennel","Fountain Grass","Foxglove","Gaillardia","Gardenias","Gas Plant","Gaura","Gazania","Geranium","Geum","Globe Thistle","Glory of the Snow","Goatsbeard","Golden Marguerite","Gomphrena","Helconia","Heliotrope","Hepatica","Hibiscus","Hollyhock","Hosta","Hyacinth","Hydrangea","Hyssop","Impatiens","Iris","Jack-in-the-Pulpit","Jacob’s Ladder","Lady’s Mantle","Lantana","Lavender","Lavender Cotton","Leadwort","Lemon Balm","Lily","Lily of the Valley","Lisianthus","Lobelia","Lupine","Maiden Pink","Malva","Marigold","Mazus","Mirabilis","Moonflower","Morning Glory","Nasturtium","Nierembergia","Orchid","Osteospermum","Pansy","Pasque","Pearly Everlasting","Pentas","Peony","Perennial Flax","Periwinkle","Petunia","Pincushion Flower","Polka Dot Plant","Primrose","Ranunculus","Red Valerian","Rhododendron","Rock Soapwort","Rose","Rue","Sanvitalia","Scabiosa","Scarlet Sage","Sea Holly","Sea Lavender","Sea Thrift","Shirley Poppy","Shooting Star","Silvermound","Skunk Cabbage","Snapdragon","Snow in Summer","Snowdrop","Solomon’s Seal","Spring Snowflake","Streptocarpus","Summer Savory","Sunflower","Sweet Woodruff","Tansy","Thunbergia","Tithonia","Torenia","Trillium","Tulip","Verbena","Violet","Virginia Bluebell","Wild Senna","Windflower","Wisteria","Yarrow","Yellow Archangel","Yellow Loosestrife","Zinnia"]}]);